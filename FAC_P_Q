void FAC_P_Q(char* pointer_arrC, char* pointer_arrZ, int &NOD, int &NOK ) {

	// Многочлен  вида 14/35^x2+15/25x+6/15
	// pointer_arrC -- Массив числителей
	// представлен в виде ['1','4','#,'1','5','#','6','#']

	// pointer_arrZ -- Массив знаменателей
	// представлен в виде ['3','5','#,'2','5','#','1','5','#']


	int pCurrentDigit = 0 ; // Для конвертации 
	int pMaxDigit = 0;		// Максимальное число

	// Нахождение максимального числа в массиве числителей
	for (int i = 0;  i < strlen(pointer_arrC); i++) {
		// Определяем разделитель между цифрами
		if (pointer_arrC[i] == '#') {
			// вычисляем максимальное число
			if (pMaxDigit < pCurrentDigit) pMaxDigit = pCurrentDigit;
			pCurrentDigit = 0;
		}
		else
		{
			// Конвертация символа в число
			pCurrentDigit = (pCurrentDigit * 10)+ ((int)pointer_arrC[i] - (int)48) ;
		}
	}

	bool foundNOD = true;
	int  maxNOD = 0;
	
	// Поиск НОД
	for (int pCurD = pMaxDigit; pCurD > 0; pCurD--) {

		pCurrentDigit = 0;
		foundNOD = true;

		for (int i = 0; i < strlen(pointer_arrC); i++) {
			// Определяем разделитель между цифрами
			if (pointer_arrC[i] == '#') {
				// вычисляем мксимальное число
				if (pCurrentDigit % pCurD != 0) { foundNOD = false; break; }

				pCurrentDigit = 0;
			}
			else
			{
				// Конвертация символа в число
				pCurrentDigit = (pCurrentDigit * 10) + ((int)pointer_arrC[i] - (int)48);
			}
		}

		// Нашли НОД ?
		if (foundNOD) {	maxNOD = pCurD;	break;	}

	}


	// --------------------------- НОК -----------------------------------//
	pMaxDigit = 0;		// Максимальное число
	for (int i = 0; i < strlen(pointer_arrZ); i++) {
		// Определяем разделитель между цифрами
		if (pointer_arrC[i] == '#') {
			// вычисляем максимальное число
			if (pMaxDigit < pCurrentDigit) pMaxDigit = pCurrentDigit;
			pCurrentDigit = 0;
		}
		else
		{
			// Конвертация символа в число
			pCurrentDigit = (pCurrentDigit * 10) + ((int)pointer_arrZ[i] - (int)48);
		}
	}

	bool foundNOK = true;
	int  minNOK = 0;
	// Поиск НОK
	for (int pCurD = 1; pCurD < pMaxDigit * pMaxDigit; pCurD++) {

		pCurrentDigit = 0;
		foundNOK = true;

		for (int i = 0; i < strlen(pointer_arrZ); i++) {
			// Определяем разделитель между цифрами
			if (pointer_arrZ[i] == '#') {
				// вычисляем мксимальное число
				if (pCurD % pCurrentDigit  != 0) { foundNOK = false; break; }

				pCurrentDigit = 0;
			}
			else
			{
				// Конвертация символа в число
				pCurrentDigit = (pCurrentDigit * 10) + ((int)pointer_arrZ[i] - (int)48);
			}
		}

		// Нашли НОД ?
		if (foundNOK) 
		{ 
			minNOK = pCurD; 
			break; 
		}

	}

	NOD = maxNOD;
	NOK = minNOK;

}
